name: repo2docker-dockerhub
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-push:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Update submodules to latest remote HEAD
      run: |
        echo "Fetching latest commits for submodules";
        # For each submodule fetch origin and fast-forward to its remote HEAD branch
        git submodule foreach 'git fetch origin --prune';
        # Attempt to detect and use the remote HEAD (works if origin/HEAD is set)
        git submodule foreach 'HEADBR=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed s@^refs/remotes/origin/@@); if [ -n "$HEADBR" ]; then git checkout "$HEADBR" || true; git reset --hard "origin/$HEADBR"; else echo "No origin/HEAD symbolic ref, leaving as-is"; fi';
        echo "Final submodule status:";
        git submodule status --recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Back up and remove binder/Dockerfile for CI build
      run: |
        if [ -f binder/Dockerfile ]; then
          echo "Backing up binder/Dockerfile then removing for CI build so repo2docker copies repo contents"
          cp binder/Dockerfile binder/Dockerfile.ci.bak
          rm -f binder/Dockerfile
        fi

    - name: Derive lowercase image name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY#*/}"
        REPO_NAME_LC="$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')"
        echo "REPO_NAME_LC=$REPO_NAME_LC" >> $GITHUB_ENV
        echo "IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME_LC" >> $GITHUB_ENV

    - name: Build and push with repo2docker (Docker Hub)
      id: r2d
      uses: jupyterhub/repo2docker-action@master
      with:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKER_REGISTRY: docker.io
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        # Do not set BINDER_CACHE (Quay-specific)

    - name: Compute short SHA and image ref
      run: |
        SHORT_SHA="${GITHUB_SHA::12}"
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "IMAGE_REF=${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME_LC:$SHORT_SHA" >> $GITHUB_ENV

    - name: Restore binder/Dockerfile and update FROM tag (preserve COPY lines)
      run: |
        if [ -f binder/Dockerfile.ci.bak ]; then
          mv -f binder/Dockerfile.ci.bak binder/Dockerfile
        else
          echo "# Github Action Built Image" > binder/Dockerfile
          echo "FROM $IMAGE_REF" >> binder/Dockerfile
        fi
        sed -E -i '1,/^FROM / s|^FROM .*$|FROM '"$IMAGE_REF"'|' binder/Dockerfile
        echo "Updated FROM in binder/Dockerfile to $IMAGE_REF"
    - name: Append submodule hashes and commit URLs to Dockerfile
      run: |
        echo "# Submodule hashes and commit URLs for this build:" >> binder/Dockerfile
        if [ -f .gitmodules ]; then
          for submodule in $(git config --file .gitmodules --get-regexp path | awk '{print $2}'); do
            if [ -d "$submodule/.git" ]; then
              hash=$(git -C "$submodule" rev-parse HEAD || echo "UNKNOWN")
              url=$(git config --file .gitmodules --get-regexp "submodule.$submodule.url" | awk '{print $2}')
              # Normalize common SSH/HTTPS forms to https://github.com/owner/repo
              norm_url=$url
              if echo "$norm_url" | grep -q '^git@github.com:'; then
                norm_url=https://github.com/$(echo "$norm_url" | sed 's#git@github.com:##; s#\.git$##')
              fi
              if echo "$norm_url" | grep -q '^https://github.com/'; then
                echo "# $submodule: $hash $norm_url/tree/$hash" >> binder/Dockerfile
              else
                echo "# $submodule: $hash $url (non-GitHub URL)" >> binder/Dockerfile
              fi
            else
              echo "# $submodule: (missing .git directory)" >> binder/Dockerfile
            fi
          done
        else
          echo "# (No submodules)" >> binder/Dockerfile
        fi

    - name: Commit and push binder/Dockerfile with rebase & retry
      env:
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions
        GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
      run: |
        set -euo pipefail
        git add binder/Dockerfile
        if git diff --cached --quiet; then
          echo "No changes to commit in binder/Dockerfile"; exit 0; fi
        attempts=5
        for i in $(seq 1 $attempts); do
          echo "Attempt $i to rebase & push..."
          git fetch origin
          # Ensure on main
            git checkout main
          # Rebase onto latest remote main
          if ! git rebase origin/main; then
            echo "Rebase failed (conflict). Aborting."; git rebase --abort || true; exit 1; fi
          # Create / amend commit (if commit already exists from previous loop)
          if git diff --cached --quiet; then
            echo "Nothing staged after rebase; maybe already upstream"; exit 0; fi
          if git log -1 --pretty=%B | grep -q 'chore: update Binder base image tag'; then
            git commit --amend -m "chore: update Binder base image tag" || true
          else
            git commit -m "chore: update Binder base image tag"
          fi
          if git push origin HEAD:main; then
            echo "Push succeeded"; exit 0; fi
          echo "Push failed (non-fast-forward likely). Retrying after backoff...";
          sleep $((5 * i))
        done
        echo "Failed to push after $attempts attempts"; exit 1